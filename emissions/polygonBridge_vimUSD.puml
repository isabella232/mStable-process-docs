@startuml

title "Emissions to Polygon Vaults"

actor Ops as ops

box "Mainnet" #LightGreen
participant "Emissions Controller" as ec <<mStable>>
participant "MTA" as mta <<mStable>>
participant "v-imUSD\nBridge Forwarder" as rr <<mStable>>
participant "Root\nChain Manager" as rcm <<Polygon>>
end box

participant "PoS Bridge" as b <<Polygon>>

box "Polygon" #LightBlue
participant "Child\nChain Manager" as ccm <<Polygon>>
participant "Polygon MTA" as pmta <<Polygon>>
participant "v-imUSD\nL2 Bridge Recipient" as cr <<mStable>>
participant "Polygon\nEmissions Controller" as cem <<mStable>>
participant "Polygon\nimUSD Vault" as vault <<mStable>>
end box

actor User as user

activate b
b -> rcm : on StateSynced
note right : watch for\nStateSync events

ops -> ec : distributeRewards ([dial ids])
activate ec
ec -> mta: transfer(\nRoot Recipient,\nrewards)
activate mta
note left: transfer MTA\nfrom Emissions Controller\nto Root Recipient
return
ec -> rr: notifyRewardAmount(rewards)
activate rr
rr -> rcm : depositFor (\nChild Recipient,\nMTA,\namount)
activate rcm
rcm -> mta : transferFrom (\nRoot Recipient,\nRoot Chain Manager,\namount)
note right : transfer MTA\nfrom Recipient\nto Bridge
activate mta
return
return
note right : emit StateSynced event
return
return

rcm -> b : StateSynced (\nid\nreceiver,\ndata)
b -> ccm : onStateReceived (\nid\nreceiver,\ndata)
activate ccm
ccm -> pmta : deposit (\nChild Recipient,\namount)
activate pmta
pmta -> pmta : mint ()
note left : mints MTA\nto Child Recipient
return
return

==== 3-5 Minutes for sync ====

ops -> cem : distributeRewards ([imUSD Vault])
activate cem
cem -> pmta : transferFrom (\nChild Recipient,\nimUSD Vault,\namount)
activate pmta
note left: transfer MTA\nfrom Child Recipient\nto imUSD Vault
return
cem -> vault : notifyRewardAmount (\namount)
activate vault
return
return

==== After rewards have accrued ====

user -> vault: claimRewards ()
activate vault
vault -> pmta: transfer(user, rewards)
activate pmta
note left: transfer MTA\nfrom Vault\nto User
return
return

@enduml