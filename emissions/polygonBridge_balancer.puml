@startuml

title "Emissions to Polygon Balancer Pool"

actor Ops as ops

box "Mainnet" #LightGreen
participant "Emissions Controller" as ec <<mStable>>
participant "MTA" as mta <<mStable>>
participant "Disperse\nBridge Forwarder" as bf <<mStable>>
participant "Root\nChain Manager" as rcm <<Polygon>>
end box

participant "PoS Bridge" as b <<Polygon>>

participant "Balancer\nMining\nScript" as bms <<Balancer>>

box "Polygon" #LightBlue
participant "Child\nChain Manager" as ccm <<Polygon>>
participant "Disperse\nForwarder" as df <<mStable>>
participant "Disperse" as d <<Disperse.app>>
participant "Polygon MTA" as pmta <<Polygon>>
end box

actor Users as user

activate b
b -> rcm : on StateSynced
note right : watch for\nStateSync events

ops -> ec : distributeRewards ([dial ids])
activate ec
ec -> mta: transfer(Root Recipient, rewards)
activate mta
note left: transfer MTA\nfrom Emissions Controller\nto Root Recipient
return
ec -> bf: notifyRewardAmount(rewards)
activate bf
bf -> rcm : depositFor (\nDisperse Forwarder,\nMTA,\namount)
activate rcm
rcm -> mta : transferFrom (\nRoot Recipient,\nRoot Chain Manager,\namount)
note right : transfer MTA\nfrom Recipient\nto Bridge
activate mta
return
return
note right : emit StateSynced event
return
return

rcm -> b : StateSynced (\nid\nreceiver,\ndata)
b -> ccm : onStateReceived (\nid\nreceiver,\ndata)
activate ccm
ccm -> pmta : deposit (Disperse Forwarder, amount)
activate pmta
pmta -> pmta : mint ()
note left : mints MTA\nto Disperse Forwarder
return
return

====

ops -> bms : get liquidity report
activate bms
note left: get file from GitHub repo
return json file of pool liquidity providers

ops -> ops : task to proportion rewards (json file)

ops -> df : disperseToken (recipients,[] values[])
activate df
df -> pmta : approve (Disperse, total rewards)
activate pmta
return
df -> d : disperseTokenSimple
activate d
loop recipients 
d -> pmta : transferFrom (Disperse Forwarder, recipient, value)
activate pmta
note left: Transfer MTA\nfrom Disperse Forwarder\nto each recipient
return
end
return
return


@enduml